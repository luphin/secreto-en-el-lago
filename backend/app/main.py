"""
AplicaciÃ³n principal FastAPI para el Sistema de PrÃ©stamo BEC
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging

from app.core.config import settings
from app.core.database import connect_to_mongo, close_mongo_connection
from app.core.kafka_producer import kafka_producer
from app.core.storage import storage_manager
from app.api.v1.router import api_router

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Maneja el ciclo de vida de la aplicaciÃ³n"""
    # Startup
    logger.info("ðŸš€ Iniciando Sistema de PrÃ©stamo BEC...")
    
    await connect_to_mongo()
    await kafka_producer.start()
    storage_manager.initialize()
    
    logger.info("âœ¨ Sistema iniciado correctamente")
    
    yield
    
    # Shutdown
    logger.info("ðŸ›‘ Deteniendo sistema...")
    
    await close_mongo_connection()
    await kafka_producer.stop()
    
    logger.info("ðŸ‘‹ Sistema detenido correctamente")


app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="API Backend para el Sistema de PrÃ©stamo de la Biblioteca de EstaciÃ³n Central",
    lifespan=lifespan
)

# ConfiguraciÃ³n CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(api_router, prefix=settings.API_V1_PREFIX)


@app.get("/", tags=["Health"])
async def root():
    """Endpoint de verificaciÃ³n de salud"""
    return {
        "message": "Sistema de PrÃ©stamo BEC - API Running",
        "version": settings.VERSION,
        "status": "healthy"
    }


@app.get("/health", tags=["Health"])
async def health_check():
    """Endpoint de health check"""
    return {"status": "ok"}
